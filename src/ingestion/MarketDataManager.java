package ingestion;

import data.TickData;
import util.SimulationLogger;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Manages structured market data generated by Python pipeline.
 * Provides navigation and selection of tickers by date.
 */
public class MarketDataManager {
    private final String baseDir;

    public MarketDataManager(String baseDir) {
        this.baseDir = baseDir;
        validateBaseDirectory();
    }

    /**
     * Get MarketDataReader for specific ticker and date.
     *
     * @param ticker Ticker symbol
     * @param date   Date in format YYYY-MM-DD
     * @return MarketDataReader configured for the ticker/date
     */
    public MarketDataReader getReader(String ticker, String date) {
        String filePath = String.format("%s/tickers/%s/%s_ticks.csv", baseDir, ticker, date);

        File file = new File(filePath);
        if (!file.exists()) {
            throw new IllegalArgumentException("Data file not found: " + filePath);
        }

        return new CsvTickDataReader(filePath);
    }

    /**
     * Get MarketDataReader for ticker on most recent available date.
     *
     * @param ticker Ticker symbol
     * @return MarketDataReader for most recent date
     */
    public MarketDataReader getReaderLatest(String ticker) {
        List<String> dates = listDates(ticker);
        if (dates.isEmpty()) {
            throw new IllegalArgumentException("No data available for ticker: " + ticker);
        }
        return getReader(ticker, dates.get(dates.size() - 1));
    }

    /**
     * List all available tickers.
     *
     * @return List of ticker symbols
     */
    public List<String> listTickers() {
        Path tickersDir = Paths.get(baseDir, "tickers");
        if (!Files.exists(tickersDir)) {
            return Collections.emptyList();
        }

        try {
            return Files.list(tickersDir)
                    .filter(Files::isDirectory)
                    .map(path -> path.getFileName().toString())
                    .sorted()
                    .collect(Collectors.toList());
        } catch (IOException e) {
            SimulationLogger.log("Error listing tickers: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    /**
     * List all available dates for a ticker.
     *
     * @param ticker Ticker symbol
     * @return Sorted list of dates in format YYYY-MM-DD
     */
    public List<String> listDates(String ticker) {
        Path tickerDir = Paths.get(baseDir, "tickers", ticker);
        if (!Files.exists(tickerDir)) {
            return Collections.emptyList();
        }

        try {
            return Files.list(tickerDir)
                    .filter(path -> path.toString().endsWith("_ticks.csv"))
                    .map(path -> {
                        String filename = path.getFileName().toString();
                        return filename.replace("_ticks.csv", "");
                    })
                    .sorted()
                    .collect(Collectors.toList());
        } catch (IOException e) {
            SimulationLogger.log("Error listing dates for " + ticker + ": " + e.getMessage());
            return Collections.emptyList();
        }
    }

    /**
     * Print summary of available data.
     */
    public void printSummary() {
        SimulationLogger.logSection("MARKET DATA SUMMARY");

        List<String> tickers = listTickers();
        SimulationLogger.log("Total tickers: " + tickers.size());
        SimulationLogger.log("");

        for (String ticker : tickers) {
            List<String> dates = listDates(ticker);
            SimulationLogger.log(String.format("  %-12s | %d days | Dates: %s",
                    ticker,
                    dates.size(),
                    dates.isEmpty() ? "none" : dates.get(0) + " to " + dates.get(dates.size() - 1)));
        }
    }

    /**
     * Get MarketDataReader for specific ticker and LocalDate
     * @param ticker Ticker symbol
     * @param date LocalDate
     * @return MarketDataReader configured for the ticker/date
     */
    public MarketDataReader getReader(String ticker, LocalDate date) {
        return getReader(ticker, date.toString());
    }

    /**
     * Get tick data for specific ticker and date
     * @param ticker Ticker symbol
     * @param date LocalDate
     * @return List of tick data
     */
    public List<TickData> getTickData(String ticker, LocalDate date) {
        MarketDataReader reader = getReader(ticker, date);
        return reader.readTickData();
    }

    /**
     * List all available dates for a ticker as LocalDate objects
     * @param ticker Ticker symbol
     * @return Sorted list of LocalDate objects
     */
    public List<LocalDate> listDatesAsLocalDate(String ticker) {
        return listDates(ticker).stream()
            .map(LocalDate::parse)
            .sorted()
            .collect(Collectors.toList());
    }

    private void validateBaseDirectory() {
        Path basePath = Paths.get(baseDir);
        if (!Files.exists(basePath)) {
            SimulationLogger.log("Warning: Market data directory not found: " + baseDir);
        }
    }
}